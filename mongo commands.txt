mongo - Open a connection to the local mongodb instance
show dbs - show all databases
use db_name - create and switch to the databases but it does not appear in current dbs since nothing is inserted in it
db - prints current database 
db.dropDatabase()- delete the current database
show collections - show all collections in database
db.createCollection("users") - create a collection with name users


CRUD -Create Read Update delete

//Create
db.Collections.insertOne({key:"value"});
db.Collections.insertOne({name:"thanu",place:malappuram,min_age:30})

db.collections.insertMany([{name:"thanu"},{age:"56"}]);
db.collections.insertMany([{name:"thanu"},{age:"56"}]);

db.collections.insertOne(
  { "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 },
  { "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 },
  { "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 },
  { "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 },
  { "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 }
)
db.collections.find() // Get all documents from users collection
db.users.find(<filter object>)// finds all documents that matches the filter object
db.collections.find({age:56})

db.collections.find(<filter object> , <select object>)// Finds all documents that matches the filter object but returns only the field specified in the selected object

db.collections.find({age:56},{name:1,_id:0});
// name:1 tells that name field must be taken and 0 means that field is not wanted
db.collections.findOne({name:"anjitha"})// Only returns the first document that matches the filter object

db.collections.countDocuments(<filter object>)//returns documents matching the filter object, if filter object empty returns all documents count

UPDATE

db.users.updateOne({name : "nila"} , {$set : {name : "malu"}}); // updates name nila with malu.Only considers the first match

db.users.updateMany({age:10},{$set: {age:15}})// replaces all age of 10 to age 15

db.updateMany({age : 15},{$inc : {age:10}});// add 10  to age which have age 10

db.replaceOne({name:"nila"},{{name:"achu"}});//Replaces the first match,replaces the complete document instead of replacing the field

delete

db.users.deleteOne({name : "Athira"});//Deletes first document  that matches the filter object

db.users.deleteMany({age :11});Deletes all documents matching the filter object

Additional Filters
db.users.find({name:{$eq : {name:"Akash"}}});//Get all the users with the name Akash
db.users.find({name:{$ne : {name:"Akash"}}});//Get all the users whose name not equal to Akash

db.users.find({age :{$gt : 20}});//Get all the users with age greater than 20

db.users.find({age:{$gte : 20}});//Get all the users with age greater than or equal to 20

db.users.find({age :{$lt : 25}}); Get al users with age less than 25
db.users.find({age : {$lte : 20}});// Get all users with age less than or equal to 20

db.users.find({name:{$in:["nila","Akash"]}}) // Get all the users with the name of nila and akash

db.users.find({name:{$nin:["nila","Akash"]}}) // Get all the users except those with the name nila and akash

db.users.find({$and :[{name:"nila"},{age:20}]}) // Get all the users with the name nila and age 20

db.users.find({$or :[{name:"nila"},{age:20}]}) // Get all the users with the name nila or age 20

db.users.find({name:{$not : {$eq : "nila"}}}) // Get all the users except those with the name nila

db.users.find({$age : {$exists : true}}) // Get all the users having an age field

db.users.find({$expr : {$gt: {$"age","$min_age"}}})// Get all the users having their age greater than min age

//Additional update objects

db.users.updateOne({age : 25},{$set : {name:"meera"}})// updates the name of the first user with the age of 25 to the value meera

db.users.updateOne({age : 25},{$inc : {age:5}})// Add 5 to the age of first user with the age of 10

db.users.updateMany({},{$push : {social_medias : "Instagram"}})// Add Instagram to the "social_medias" array for all users

db.users.updateMany({},{$pull : {social_medias : "Instagram"}})//Removes Instagram from the "social_medias" array for all users

// Read Modifiers

db.users.find().sort({name : 1,age : -1})//Get all users sorted by name in alphabetical order and if any names are same sort them by age in reverse order

db.users.find().limit(2) // Only returns the first 2 users

db.users.find().skip(4)//Skip the first 4 users when returning the result.Skip and limit are combined for applying pagination